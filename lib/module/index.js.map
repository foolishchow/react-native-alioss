{"version":3,"sources":["index.tsx"],"names":["DeviceEventEmitter","NativeEventEmitter","NativeModules","Platform","AliOss","conf","verifyCRC64","maxRetryCount","timeoutIntervalForRequest","timeoutIntervalForResource","imageXOssProcess","partSize","mulitpartUploadConfig","appendOptions","appendPosition","contentType","contentMd5","contentEncoding","contentDisposition","AliyunOSS","enableDevMode","initWithSTSTokenProvider","endPoint","provider","configuration","initWithSTS","addEventListener","param","then","res","setSTSToken","request_id","initWithPlainTextAccessKey","accessKey","secretKey","initWithImplementedSigner","signature","initWithSecurityToken","securityToken","initWithServerSTS","server","asyncUpload","bucketName","objectKey","filepath","options","asyncResumableUpload","asyncAppendObject","initMultipartUpload","multipartUpload","uploadId","listParts","abortMultipartUpload","asyncDownload","asyncListBuckets","asyncHeadObject","asyncListObjects","asyncCopyObject","srcBucketName","srcObjectKey","desBucketName","destObjectKey","doesObjectExist","asyncDeleteObject","asyncCreateBucket","acl","region","asyncGetBucketACL","asyncDeleteBucket","event","callback","RNAliyunEmitter","OS","subscription","addListener","e"],"mappings":"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","sourcesContent":["import {\n  DeviceEventEmitter,\n  NativeEventEmitter,\n  NativeModules,\n  Platform,\n  EmitterSubscription,\n} from 'react-native';\n\nconst { AliOss } = NativeModules;\n\ntype OSSinit = {\n  maxRetryCount: number;\n  timeoutIntervalForRequest: number;\n  timeoutIntervalForResource: number;\n};\n\ntype OssListOptions = {\n  prefix: string;\n  marker?: string;\n  maxKeys?: string;\n  delimiter?: string;\n};\n\n//default configuration for OSS Client\nconst conf: OSSinit = {\n  // @ts-ignore\n  verifyCRC64: false,\n  maxRetryCount: 3,\n  timeoutIntervalForRequest: 30,\n  timeoutIntervalForResource: 24 * 60 * 60,\n};\n\nconst imageXOssProcess = {\n  'x-oss-process': '',\n};\n\nlet partSize = 128 * 1024;\nconst mulitpartUploadConfig = {\n  partSize: partSize,\n};\ntype AppendType = {\n  appendPosition: number;\n  contentType: string;\n  contentMd5: string;\n  contentEncoding: string;\n  contentDisposition: string;\n};\n\n//appendObject\nconst appendOptions: AppendType = {\n  appendPosition: 0,\n  contentType: '',\n  contentMd5: '',\n  contentEncoding: '',\n  contentDisposition: '',\n};\n\ntype StsToken = {\n  endpoint: string;\n  bucketName: string;\n  accessKeyId: string;\n  accessKeySecret: string;\n  securityToken: string;\n  expiration?: number;\n  expirationTimeInGMTFormat?: string;\n};\nclass AliyunOSS {\n  /**\n   * Enable dev mode\n   */\n  static enableDevMode() {\n    AliOss.enableDevMode();\n  }\n\n  /**\n   * 初始化sts token\n   * @param endPoint\n   * @param callback\n   */\n  static initWithSTSTokenProvider(\n    endPoint: string,\n    provider: () => Promise<StsToken | undefined>,\n    configuration = conf\n  ) {\n    AliOss.initWithSTS(endPoint, configuration);\n    AliyunOSS.addEventListener(\n      // @ts-ignore\n      'onSeverTokenRequest',\n      (param: { request_id: string }) => {\n        provider().then((res) => {\n          AliOss.setSTSToken(param.request_id, res);\n        });\n      }\n    );\n  }\n\n  /**\n   * Initialize the OSS Client\n   * Mode: PlainTextAKSK\n   */\n  static initWithPlainTextAccessKey(\n    accessKey: string,\n    secretKey: string,\n    endPoint: string,\n    configuration = conf\n  ) {\n    AliOss.initWithPlainTextAccessKey(\n      accessKey,\n      secretKey,\n      endPoint,\n      configuration\n    );\n  }\n\n  /**\n   * Initialize the OSS Client\n   * Mode: ImplementedSigner\n   */\n  static initWithImplementedSigner(\n    signature: string,\n    accessKey: string,\n    endPoint: string,\n    configuration = conf\n  ) {\n    AliOss.initWithImplementedSigner(\n      signature,\n      accessKey,\n      endPoint,\n      configuration\n    );\n  }\n\n  /**\n   * Initialize the OSS Client\n   * Mode: SecurityToken (STS)\n   */\n  static initWithSecurityToken(\n    securityToken: string,\n    accessKey: string,\n    secretKey: string,\n    endPoint: string,\n    configuration = conf\n  ) {\n    AliOss.initWithSecurityToken(\n      securityToken,\n      accessKey,\n      secretKey,\n      endPoint,\n      configuration\n    );\n  }\n\n  /**\n   * Initialize the OSS Client\n   * Server STS\n   */\n  static initWithServerSTS(\n    server: string,\n    endPoint: string,\n    configuration = conf\n  ) {\n    AliOss.initWithServerSTS(server, endPoint, configuration);\n  }\n\n  /**\n   * Asynchronously uploading\n   */\n  static asyncUpload(\n    bucketName: string,\n    objectKey: string,\n    filepath: string,\n    options = {}\n  ): Promise<any> {\n    return AliOss.asyncUpload(bucketName, objectKey, filepath, options);\n  }\n\n  /**\n   * Asynchronously\n   */\n  static asyncResumableUpload(\n    bucketName: string,\n    objectKey: string,\n    filepath = '',\n    options = {}\n  ): Promise<any> {\n    return AliOss.asyncResumableUpload(\n      bucketName,\n      objectKey,\n      filepath,\n      options\n    );\n  }\n\n  /**\n   * Asynchronously asyncAppendObject\n   */\n  static asyncAppendObject(\n    bucketName: string,\n    objectKey: string,\n    filepath: string,\n    options = appendOptions\n  ): Promise<any> {\n    return AliOss.asyncAppendObject(bucketName, objectKey, filepath, options);\n  }\n\n  /**\n   * Asynchronously\n   */\n  static initMultipartUpload(\n    bucketName: string,\n    objectKey: string\n  ): Promise<any> {\n    return AliOss.initMultipartUpload(bucketName, objectKey);\n  }\n\n  /**\n   * Asynchronously multipartUpload\n   */\n  static multipartUpload(\n    bucketName: string,\n    objectKey: string,\n    uploadId: string,\n    filepath = '',\n    options = mulitpartUploadConfig\n  ): Promise<any> {\n    return AliOss.multipartUpload(\n      bucketName,\n      objectKey,\n      uploadId,\n      filepath,\n      options\n    );\n  }\n\n  /**\n   * Asynchronously listParts\n   */\n  static listParts(\n    bucketName: string,\n    objectKey: string,\n    uploadId: string\n  ): Promise<any> {\n    return AliOss.listParts(bucketName, objectKey, uploadId);\n  }\n\n  /**\n   * Asynchronously abortMultipartUpload\n   */\n  static abortMultipartUpload(\n    bucketName: string,\n    objectKey: string,\n    uploadId: string\n  ): Promise<any> {\n    return AliOss.abortMultipartUpload(bucketName, objectKey, uploadId);\n  }\n\n  /**\n   * Asynchronously downloading\n   */\n  static asyncDownload(\n    bucketName: string,\n    objectKey: string,\n    filepath = '',\n    options = imageXOssProcess\n  ): Promise<any> {\n    return AliOss.asyncDownload(bucketName, objectKey, filepath, options);\n  }\n\n  /*\n    asyncListBuckets\n    */\n\n  static asyncListBuckets(): Promise<any> {\n    return AliOss.asyncListBuckets();\n  }\n\n  /**\n   * Asynchronously getHeadObject\n   */\n\n  static asyncHeadObject(bucketName: string, objectKey: string): Promise<any> {\n    return AliOss.asyncHeadObject(bucketName, objectKey);\n  }\n\n  /**\n   * Asynchronously getAsyncObjects\n   */\n\n  static asyncListObjects(\n    bucketName: string,\n    options?: OssListOptions\n  ): Promise<any> {\n    return AliOss.asyncListObjects(bucketName, options);\n  }\n\n  /**\n   * Asynchronously asyncCopyObject\n   */\n  static asyncCopyObject(\n    srcBucketName: string,\n    srcObjectKey: string,\n    desBucketName: string,\n    destObjectKey: string,\n    options: any\n  ): Promise<any> {\n    return AliOss.asyncCopyObject(\n      srcBucketName,\n      srcObjectKey,\n      desBucketName,\n      destObjectKey,\n      options\n    );\n  }\n\n  /**\n   * Asynchronously doesObjectExist\n   */\n\n  static doesObjectExist(bucketName: string, objectKey: string): Promise<any> {\n    return AliOss.doesObjectExist(bucketName, objectKey);\n  }\n\n  /**\n   * Asynchronously asyncDeleteObject\n   */\n\n  static asyncDeleteObject(\n    bucketName: string,\n    objectKey: string\n  ): Promise<any> {\n    return AliOss.asyncDeleteObject(bucketName, objectKey);\n  }\n\n  /**\n   * Asynchronously createBucket\n   */\n  static asyncCreateBucket(\n    bucketName: string,\n    acl = 'private',\n    region: string\n  ): Promise<any> {\n    return AliOss.asyncCreateBucket(bucketName, acl, region);\n  }\n\n  /**\n   * Asynchronously getBucketACL\n   */\n  static asyncGetBucketACL(bucketName: string): Promise<any> {\n    return AliOss.asyncGetBucketACL(bucketName);\n  }\n\n  /**\n   * Asynchronously deleteBucket\n   */\n  static asyncDeleteBucket(bucketName: string): Promise<any> {\n    return AliOss.asyncDeleteBucket(bucketName);\n  }\n\n  /**\n   * event listener for native upload/download event\n   * @param event one of 'uploadProgress' or 'downloadProgress'\n   * @param callback a callback function accepts one params: event\n   */\n  static addEventListener(\n    event: 'uploadProgress',\n    callback: () => void\n  ): EmitterSubscription;\n  // eslint-disable-next-line no-dupe-class-members\n  static addEventListener(\n    event: 'downloadProgress',\n    callback: () => void\n  ): EmitterSubscription;\n  // eslint-disable-next-line no-dupe-class-members\n  static addEventListener(event: string, callback: any): EmitterSubscription {\n    const RNAliyunEmitter =\n      Platform.OS === 'ios'\n        ? new NativeEventEmitter(AliOss)\n        : DeviceEventEmitter;\n    let subscription: EmitterSubscription;\n    switch (event) {\n      case 'uploadProgress':\n        subscription = RNAliyunEmitter.addListener('uploadProgress', (e) =>\n          callback(e)\n        );\n        break;\n      case 'downloadProgress':\n        subscription = RNAliyunEmitter.addListener('downloadProgress', (e) =>\n          callback(e)\n        );\n        break;\n      case 'onSeverTokenRequest':\n        subscription = RNAliyunEmitter.addListener('onSeverTokenRequest', (e) =>\n          callback(e)\n        );\n        break;\n    }\n    // @ts-ignore\n    return subscription;\n  }\n\n  /**\n   * remove event listener for native upload/download event\n   * @param event one of 'uploadProgress' or 'downloadProgress'\n   */\n  // static removeEventListener(event: any) {\n  //   switch (event) {\n  //     case 'uploadProgress':\n  //       subscription.remove();\n  //       break;\n  //     case 'downloadProgress':\n  //       subscription.remove();\n  //       break;\n  //     case 'downloadProgress':\n  //       subscription.remove();\n  //       break;\n  //     default:\n  //       break;\n  //   }\n  // }\n}\n\nexport { AliyunOSS };\n"]}